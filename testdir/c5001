!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node
