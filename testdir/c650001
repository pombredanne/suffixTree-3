!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.s0,args.s1,suffixtree.LongestUniqueStr()))ifargs.fandlen(args.f)==2:e.write("str1:%s\nstr2:%s\nLongestUniqueStr:%s\n"%(args.f0,args.f1,suffixtree.LongestUniqueStr()))!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearchbothonacademicpaperandgoolgingonvariousforums,Ifoundoutthattheimplementationdetailhasneverbeencrystalclearlybeingpresented.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltinlineartimebutglossingoveralotofimplementationdetails,withoutwhichitisbasicallyverydifficulttoimplementsuffixtree.It'sbeenaquitepainfulexperiencetofigureoutthedetailsofimplementation.Afterspendingtensofhoursinreadingvariousmaterials,belowIamlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.1http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english2http://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:active_noderemainsrootactive_edgeissettothefirstcharacterofthenewsuffixweneedtoinsertactive_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepoint,active_lenandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length."""importsysimportargparseimportitertoolsimportpdbdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!\n")exit(1)ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!\n")exit(1)defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n')andline=="":breakyield(line)IN.close()deffileToString(file):string=""forlineinline_yielder(file):line=line.strip()ifnotline=="":string+=linereturnstringdefget_str(args):ifargs.s:iflen(args.s)==1:returnargs.s0eliflen(args.s)==2:returnargs.s0+''+args.s1+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)else:string=""iflen(args.f)==1:forfinargs.f:returnfileToString(f)eliflen(args.f)==2:returnfileToString(args.f0)+''+fileToString(args.f1)+''else:e.write("Error!Youcanonlyspecifytwostringsatmost!\n")exit(1)classNode(object):counter=itertools.count().nextdef__init__(self,start=None,end=None,SuffixLink=None,parent=None,id=None):self.start=startself.end=endself.id=Node.counter()self.SuffixLink=SuffixLinkself.parent=parentself.children={}def__repr__(self):return"Node(id=%d,start=%d,end=%d,SuffixLink=%s)"%(self.id,self.start,self.end,self.SuffixLink)defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string,nodes=None):self.string=stringself.currentNode=0self.first_str_end=Nonethisistheendindexforthefirststringself.position=-1self.nodes=nodesifnodeselseself.root=self.newNode(-1,-1,parent=None)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.memSize=0self.end=len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end,parent=None):n=Node(start,end,parent=parent)self.nodes.append(n)returnndefactive_edge_c(self):returnself.stringself.active_edgedefwalkDown(self,node):ifself.active_len>=node.edgeLen():self.active_edge+=node.edgeLen()self.active_len-=node.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink:self.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1ifc=='':self.first_str_end=self.positionself.remainder+=1self.needSuffixLink=Nonewhileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.active_node.children:leaf=self.newNode(self.position,self.end)self.active_node.childrenself.active_edge_c()=leafleaf.parent=self.active_nodeself.addSuffixLink(self.active_node)rule2else:original_leaf=self.active_node.childrenself.active_edge_c()ifself.walkDown(original_leaf):continueobservation2ifself.stringoriginal_leaf.start+self.active_len==c:observation1self.active_len+=1self.addSuffixLink(self.active_node)observation3breaksplit=self.newNode(original_leaf.start,original_leaf.start+self.active_len)self.active_node.childrenself.active_edge_c()=splitsplit.parent=self.active_nodeleaf=self.newNode(self.position,self.end)split.childrenc=leafleaf.parent=splitoriginal_leaf.start+=self.active_lensplit.childrenself.stringoriginal_leaf.start=original_leaforiginal_leaf.parent=splitself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:rule3self.active_node=self.active_node.SuffixLinkifself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\","+"style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):iftype(nodeID)==type(Node()):return"".join(self.stringnodeID.start:nodeID.end)defprintLeaves(self,nodeID,buffer):iflen(nodeID.children)==0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",shape=point\n")else:forchildinnodeID.children.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(nodeID.children)>0:buffer.write("\tnode"+str(nodeID.id)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,"+"height=.07\n")forchildinnodeID.children.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinnodeID.children.values():buffer.write("\tnode"+str(nodeID.id)+"->node"+str(child.id)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID.id)+"->node"+str(nodeID.SuffixLink.id)+"label=\"\",weight=1,style=dotted\n")forchildinnodeID.children.values():self.printSLinks(child,buffer)defcheck_node(self,node):"""Thisisoneessentialstepinfindthelongestcommonancestorfortwostrings.Thecriteriaisthat,theremustbeachildonthefirststring,andtheremustbeanotherchildfromanotherstring"""hasPoundSign=hasDollarSign=Falseforchildinnode.children.values():ifchild.start<=self.first_str_end:hasPoundSign=Trueelse:hasDollarSign=TrueifhasPoundSignandhasDollarSign:returnTruereturnFalsedefPathString(self,node):ifnode.parent:prev=self.PathString(node.parent)returnprev+self.edgeString(node)else:return""defLongestUniqueStr(self):max_len=0max_nodes=Nonefornodeinself.nodes:ifself.check_node(node):iflen(self.PathString(node))>max_len:max_len=len(self.PathString(node))max_nodes0=nodeeliflen(self.PathString(node))==max_len:max_nodes.append(node)ifmax_nodes0:return"\t".join(self.PathString(max_node)formax_nodeinmax_nodes)return""deffindSubString(self,qString):i=0node=self.rootstart=0first_time=Truewhilei<len(qString):c=qStringiifcnotinnode.children:returnFalseelse:tNode=node.childrenciffirst_time:start=tNode.startletstartstorethestartindexforthematchfirst_time=FalsetString=self.edgeString(tNode)steps=check_identity(tString,qString,i)ifsteps:ifsteps+i>=len(qString)-1:returnstart,start+len(qString)-1else:i+=stepsnode=tNodeelse:returnFalsedefmemStatistics(self):fork,vinvars(self).items():self.memSize+=sys.getsizeof(v)defcheck_identity(tString,qString,qStart):"""return0ifnotequal,otherwisenumberofstepsmoved"""step=0forcintString:ifqStart<len(qString):ifc==qStringqStart:qStart+=1step+=1continueelse:return0returnstepif__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Givenastringorafile,construtionasuffixtree"+"inlineartime.Ifyouwannatestoutfindingthelongestcommonsubstringfortwosequences"+"youcaneithersupplywiththesetwostringsto-s,ortwofilesto-f."+"Thisprogramwillproduceadotfile,whichyoucanvisulaizeitbyusingtoolslike"+"graphviz.dot-Tpng-Osty.dot")parser.add_argument('-s','--string',dest='s',nargs='*',help="specifyastring")parser.add_argument('-f','--file',dest='f',nargs='*',help="specifyafile")parser.add_argument('-q','--query',help="querysequenceyoutrytoknownwhetherisasubstring")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile.Default=sty.dto",default="sty.dot")parser.add_argument('-r','--report',default=False,action='store_true',help="reportcostedmemory"+"size.Default=False")parser.add_argument('-g','--graph',default=False,action='store_true',help="whethertoprintthe"+"dotgraphfile.Default=False")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)ifargs.report:suffixtree.memStatistics()str_len=str(len(string))mem_size=str(suffixtree.memSize)e.write("\t".join(str_len,mem_size)+"\n")ifargs.graph:O=open(args.o,'w')suffixtree.printTree(O)O.close()ifargs.query:result=suffixtree.findSubString(args.query)ifnotresult:print"%sisNOTasubstringof%s"%(args.query,string)else:print"%sisasubstringof%s:index:%s"%(args.query,string,str(result))ifargs.sandlen(args.s)==2:e.write("str1:%s\nstr2:%s\nL
