#!/usr/bin/envpython2.7"""LineartimeimplementationofSuffixTree(Ukkonnen'salgorithm)Ukkonnen'salgorithmtoimplementationofSuffixTreeinlineartimeiswellknown.However,basedonmypastonemonth'sresearcheitheronacademicpaperorgoolgingonvariousforums,Ifoundoutthattheimplementationdetailisneverclear.Textbook,likeDanGusfield'sandothersgiveyouageneralideaonhowasuffixtreecanbenbuiltbutglossingoveralotimplementationdetails,withoutwhichyoubasicallyverydifficulttoimplementit.It'sbeenquitepainfulexperiencetoimplementthesuffixtree.Afterspendingtensofhoursinreadingvariousmaterial,BelowIlistingouttwomainresourcesthatIthinktheywere,orweretryingto,givingcleardescribptionsonhowtoimplementsuffixtreeingreatdetail.http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-englishhttp://yeda.cs.technion.ac.il/~yona/suffix_tree/index.htmlHerearerulesandobservationsIusedtoimplementthesuffixtreeRule1:Afteraninsertionfromroot:	active_noderemainsroot	active_edgeissettothefirstcharacterofthenewsuffixweneedtoinsert	active_lengthisreducedby1Rule2:IfwecreateanewinternalnodeORmakeaninserterfromaninternalnode,andthisisnotthefirstSUCHinternalnodeatcurrentstep,thenwelinkthepreviousSUCHnodewithTHISonethroughasuffixlink.Rule3:Aftersplittinganedgefromanactive_nodethatisnottherootnode,wefollowthesuffixlinkgoingoutofthatnode,ifthereisany,andresettheactive_nodetothenodeitpointsto.Ifthereisnosuffixlink,wesettheactive_nodetotheroot.active_edgeandactive_lengthremainunchanged.Observation1Whenthefinalsuffixweneedtoinsertisfoundtoexistinthetreealready,thetreeitselfisnotchangedatall(weonlyupdatetheactivepointandremainder).Observation2:Ifatsomepointactive_lengthisgreaterorequaltothelengthofcurrentedge(edge_length),wemoveouractivepointdownuntiledge_lengthisnotstrictlygreaterthanactive_length.Reference:http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english"""importsysimportargparseimportitertoolsdefcheck_args(args):ifnot(args.sorargs.f):e.write("Error!Eitherchoosetosupplyastringorafile!")raiseException("Error")ifargs.sandargs.f:e.write("Error!Eitherchoosetosupplyastringorafile.Notboth!")raiseException("Error")defline_yielder(file):withopen(file)asIN:whileTrue:line=IN.readline()ifnotline.endswith('\n'):breakyield(line)IN.close()defget_str(args):ifargs.s:returnargs.selse:string=""forlineinline_yielder(args.f):line=line.strip()ifnotline=="":string+=linereturnstringclassNode(object):def__init__(self,start=None,end=None,SuffixLink=None):self.start=startself.end=endself.SuffixLink=SuffixLinkself.next={}defedgeLen(self):returnself.end-self.startclassSuffixTree:def__init__(self,string):self.string=stringself.nodes=None*(len(self.string)*2+2)self.currentNode=0self.position=-1self.root=self.newNode(-1,-1)self.active_node=self.rootself.active_edge=0self.active_len=0self.remainder=0self.end=len(self.string)self.text=None*len(self.string)self.needSuffixLink=0foriinself.string:self.__addChar(i)defnewNode(self,start,end):self.currentNode+=1self.nodesself.currentNode=Node(start=start,end=end)returnself.currentNodedefactive_edge_c(self):returnself.textself.active_edgedefwalkDown(self,node):ifself.active_len>=self.nodesnode.edgeLen():self.active_edge+=self.nodesnode.edgeLen()self.active_len-=self.nodesnode.edgeLen()self.active_node=nodereturnTruereturnFalsedefaddSuffixLink(self,node):ifself.needSuffixLink>0:self.nodesself.needSuffixLink.SuffixLink=nodeself.needSuffixLink=nodedef__addChar(self,c):self.position+=1self.textself.position=cself.remainder+=1self.needSuffixLink=-1whileself.remainder>0:ifself.active_len==0:self.active_edge=self.positionifself.active_edge_c()notinself.nodesself.active_node.next:leaf=self.newNode(self.position,self.end)self.nodesself.active_node.nextself.active_edge_c()=leafself.addSuffixLink(leaf)#rule2else:original_leaf=self.nodesself.active_node.nextself.active_edge_c()ifself.walkDown(original_leaf):continue#observation2ifself.textself.nodesoriginal_leaf.start+self.active_len==c:#observation1self.active_len+=1self.addSuffixLink(self.active_node)#observation3breaksplit=self.newNode(self.nodesoriginal_leaf.start,self.nodesoriginal_leaf.start+self.active_len)self.nodesself.active_node.nextself.active_edge_c()=splitleaf=self.newNode(self.position,self.end)self.nodessplit.nextc=leafself.nodesoriginal_leaf.start+=self.active_lenself.nodessplit.nextself.textself.nodesoriginal_leaf.start=original_leafself.addSuffixLink(split)self.remainder-=1ifself.active_node==self.rootandself.active_len>0:#rule1self.active_len-=1self.active_edge=self.position-self.remainder+1else:#rule3self.active_node=self.nodesself.active_node.SuffixLinkifself.nodesself.active_node.SuffixLinkelseself.rootdefprintTree(self,buffer):buffer.write("digraph{\n")buffer.write("\trankdir=LR\n")buffer.write("\tedgearrbufferwsize=0.4,fbufferntsize=10\n")buffer.write("\tnode1label=\"\",style=filled,fillcbufferlbufferr=lightgrey,shape=circle,width=.1,height=.1\n")buffer.write("//------leaves------\n")self.printLeaves(self.root,buffer)buffer.write("//------internalnbufferdes------\n")self.printInternalNodes(self.root,buffer)buffer.write("//------edges------\n")self.printEdges(self.root,buffer)buffer.write("//------suffixlinks------\n")self.printSLinks(self.root,buffer)buffer.write("}\n")defedgeString(self,nodeID):return"".join(self.textself.nodesnodeID.start:self.nodesnodeID.end)defprintLeaves(self,nodeID,buffer):iflen(self.nodesnodeID.next)==0:buffer.write("\tnode"+str(nodeID)+"label=\"\",shape=point\n")else:forchildinself.nodesnodeID.next.values():self.printLeaves(child,buffer)defprintInternalNodes(self,nodeID,buffer):if(notnodeID==self.root)andlen(self.nodesnodeID.next)>0:buffer.write("\tnode"+str(nodeID)+"label=\"\",style=filled,fillcolor=lightgrey,shape=circle,width=.07,height=.07\n")forchildinself.nodesnodeID.next.values():self.printInternalNodes(child,buffer)defprintEdges(self,nodeID,buffer):forchildinself.nodesnodeID.next.values():buffer.write("\tnode"+str(nodeID)+"->node"+str(child)+"label=\""+self.edgeString(child)+"\",weight=3\n")self.printEdges(child,buffer)defprintSLinks(self,nodeID,buffer):ifself.nodesnodeID.SuffixLink:buffer.write("\tnode"+str(nodeID)+"->node"+str(self.nodesnodeID.SuffixLink)+"label=\"\",weight=1,style=dotted\n")forchildinself.nodesnodeID.next.values():self.printSLinks(child,buffer)if__name__=='__main__':o=sys.stdoute=sys.stderrparser=argparse.ArgumentParser(description="Construtionasuffixtreegivenastringorafile"+"inlineartime.")parser.add_argument('-s',help="specifyastring")parser.add_argument('-f',help="specifyafile")parser.add_argument('-o',help="specifyaoutputfilenamefordotfile",default="sty.dot")args=parser.parse_args()check_args(args)string=get_str(args)suffixtree=SuffixTree(string)O=open(args.o,'w')suffixtree.printTree(O)O.close()